name: Start URL shortener
on:
  schedule:
    # Run a few times for each schedule, just in case there some transient errors occurs during the run
    - cron: '50 11 * * 1-5' # weekdays
    - cron: '50 1 * * 0,6' # weekends, 0 = sunday
    - cron: '50 5 * * 0,6' # weekends, 0 = sunday
jobs:
  health_check:
    runs-on: ubuntu-latest
    env:
      URL_SHORTENER_HOST_NAME: ${{ secrets.URL_SHORTENER_HOST_NAME }}
    steps:
      - name: Check if URL shortener is already running
        run: |
          curl $URL_SHORTENER_HOST_NAME/healthz
  notify_already_running:
    runs-on: ubuntu-latest
    needs: [health_check]
    steps:
      - name: Send slack notification URL shortener is already running
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          payload=$(echo "{\"text\":\"URL shortener infra: URL shortener is already running at <DATE>. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" | sed "s~<DATE>~$now~")
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK
          exit 0
  start_ec2_and_deploy:
    runs-on: ubuntu-latest
    needs: [health_check]
    if: ${{ failure() }}
    env:
      DOMAIN: ${{ secrets.DOMAIN }}
      URL_REDIRECT_DOMAIN: ${{ secrets.URL_REDIRECT_DOMAIN }}
      SSH_USER: ${{ secrets.SSH_USER }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up ansible
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          pwd
          ls -la

          # Install ansible and required dependencies
          sudo apt-get update
          sudo apt-get -y install ansible
          pip3 install --no-input boto3

          # Ansible config
          cat << EOF | sudo tee /etc/ansible/ansible.cfg > /dev/null
          # Since Ansible 2.12 (core):
          # To generate an example config file (a "disabled" one with all default settings, commented out):
          #               $ ansible-config init --disabled > ansible.cfg
          #
          # Also you can now have a more complete file by including existing plugins:
          # ansible-config init --disabled -t all > ansible.cfg

          # For previous versions of Ansible you can check for examples in the 'stable' branches of each version
          # Note that this file was always incomplete  and lagging changes to configuration settings

          # for example, for 2.9: https://github.com/ansible/ansible/blob/stable-2.9/examples/ansible.cfg
          [inventory]
          enable_plugins = aws_ec2

          [defaults]
          host_key_checking = False
          EOF

          # create aws-ec2.yml inventory
          cat << EOF > ./instances/ansible/aws_ec2.yml
          plugin: aws_ec2
          regions: us-east-1
          aws_access_key: $AWS_ACCESS_KEY
          aws_secret_key: $AWS_SECRET_KEY
          keyed_groups:
            - key: tags
              prefix: tag
            - key: tags.Name
              separator: ''
          EOF

          # Create variables
          cat << EOF > ./instances/ansible/vars.yml
          USER: $SSH_USER
          DOMAIN: $DOMAIN
          URL_REDIRECT_DOMAIN: $URL_REDIRECT_DOMAIN
          DOMAINS:
            - $DOMAIN
            - $URL_REDIRECT_DOMAIN
          ADMIN_EMAIL: $ADMIN_EMAIL
          FS_MOUNT_PATH: $FS_MOUNT_PATH
          EBS_DEVICE_PATH: $EBS_DEVICE_PATH
          EOF
      - name: Create AWS config and credentials
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          mkdir ~/.aws/
          cat << EOF > ~/.aws/config
          [default]
          region = $AWS_REGION
          output = json
          EOF
          chmod 600 ~/.aws/config

          cat << EOF > ~/.aws/credentials
          [default]
          aws_access_key_id = $AWS_ACCESS_KEY
          aws_secret_access_key = $AWS_SECRET_KEY
          EOF
          chmod 600 ~/.aws/credentials
      - name: Create SSH private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/url_shortener_rsa
          chmod 600 ~/.ssh/url_shortener_rsa
      - name: Run start script
        id: start_script
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          URL_SHORTENER_REDEPLOY_TOKEN: ${{ secrets.URL_SHORTENER_REDEPLOY_TOKEN }}
        run: | 
          cd instances
          ./scripts/start.sh $URL_SHORTENER_REDEPLOY_TOKEN $SSH_USER ~/.ssh/url_shortener_rsa
  notify_unsuccessful:
    runs-on: ubuntu-latest
    needs: [start_ec2_and_deploy]
    if: ${{ needs.start_ec2_and_deploy == 'failure' }}
    steps:
      - name: Send slack notification unsuccessful run
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          payload=$(echo "{\"text\":\"URL shortener backend: Failed to start EC2 and deploy URL shortener at <DATE>. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" | sed "s~<DATE>~$now~")
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK
  notify_successful:
    runs-on: ubuntu-latest
    needs: [start_ec2_and_deploy]
    steps:
      - name: Send slack notification successful run
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          payload=$(echo "{\"text\":\"URL shortener infra: Successfully started EC2 and deployed URL shortener at <DATE>. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}" | sed "s~<DATE>~$now~")
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK
