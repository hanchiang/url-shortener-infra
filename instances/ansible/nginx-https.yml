- hosts: URL_shortener
  name: Configure SSL for nginx using acme
  remote_user: "{{ USER }}"
  gather_facts: no
  vars_files:
    - ./vars.yml
  tasks:
    - name: Install required packages
      args:
        executable: /bin/bash
      become: yes
      become_method: su
      become_user: root
      become_exe: "sudo su -"
      register: install_required_packages
      shell: |
        export DEBIAN_FRONTEND=noninteractive

        apt-get -y install socat
        curl https://get.acme.sh | sh -s email={{ ADMIN_EMAIL }}
    - debug: var=install_required_packages.stdout_lines
    - debug: var=install_required_packages.stderr_lines

    - name: Install SSL cert
      args:
        executable: /bin/bash
      register: install_ssl
      become: yes
      become_method: su
      become_user: root
      become_exe: "sudo su -"
      async: 300
      poll: 15
      loop: "{{ DOMAINS }}"
      shell: |
        mkdir -p /etc/ssl/{{ item }}

        SSL_CERT_FILE_PATH="/etc/ssl/{{ item }}/certificate.crt"
        SSL_KEY_FILE_PATH="/etc/ssl/{{ item }}/private.key"

        if [ -f "$SSL_CERT_FILE_PATH" ] && [ -f "$SSL_KEY_FILE_PATH" ]
        then
          echo "SSL certs already exist for {{ item }}"
        else
          ~/.acme.sh/acme.sh --issue -d {{ item }} --nginx
          ~/.acme.sh/acme.sh --install-cert -d {{ item }} --key-file $SSL_KEY_FILE_PATH \
          --fullchain-file $SSL_CERT_FILE_PATH --reloadcmd "sudo systemctl reload nginx"
        fi
        # Run cron to renew certs to verify result
        ~/.acme.sh/acme.sh --cron
    - debug:
        var: item.stdout_lines
      loop: "{{ install_ssl.results }}"

    - name: Update nginx config
      args:
        executable: /bin/bash
      register: update_nginx_config
      shell: |
        NGINX_DIRECTORY="{{ FS_MOUNT_PATH }}/nginx"
        sudo mkdir -p $NGINX_DIRECTORY/{{ DOMAIN }}
        sudo mkdir -p $NGINX_DIRECTORY/{{ URL_REDIRECT_DOMAIN }}

        cat <<EOF | sudo tee /etc/nginx/sites-available/{{ DOMAIN }} > /dev/null
        upstream url_shortener_backend {
          server localhost:3000;
        }

        server {
          listen 80;
          listen [::]:80;

          server_name {{ DOMAIN }};

          return 301 https://\$host\$request_uri;
        }

        limit_req_zone \$binary_remote_addr zone=url_shorten_limit:10m rate=3r/s;

        server {
          listen 443 ssl;

          ssl_certificate      /etc/ssl/{{ DOMAIN }}/certificate.crt;
          ssl_certificate_key  /etc/ssl/{{ DOMAIN }}/private.key;

          server_name {{ DOMAIN }};
          access_log $NGINX_DIRECTORY/{{ DOMAIN }}/access.log;
          error_log $NGINX_DIRECTORY/{{ DOMAIN }}/error.log;

          server_tokens off;
          client_max_body_size 1m;

          location = /favicon.ico {
            return 204;
            access_log     off;
            log_not_found  off;
          }

          location / {
            limit_req zone=url_shorten_limit burst=6 delay=2;
            limit_req_status 444;
            proxy_pass http://url_shortener_backend;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-Host \$host;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwared-Proto \$scheme;
          }
        }

        server {
          listen 80;
          listen [::]:80;

          server_name {{ URL_REDIRECT_DOMAIN }};

          return 301 https://\$host\$request_uri;
        }

        limit_req_zone \$binary_remote_addr zone=url_redirect_limit:10m rate=20r/s;

        server {
          listen 443 ssl;

          ssl_certificate      /etc/ssl/{{ URL_REDIRECT_DOMAIN }}/certificate.crt;
          ssl_certificate_key  /etc/ssl/{{ URL_REDIRECT_DOMAIN }}/private.key;

          server_name {{ URL_REDIRECT_DOMAIN }};
          access_log $NGINX_DIRECTORY/{{ URL_REDIRECT_DOMAIN }}/access.log;
          error_log $NGINX_DIRECTORY/{{ URL_REDIRECT_DOMAIN }}/error.log;

          server_tokens off;
          client_max_body_size 1m;

          location = /favicon.ico {
            return 204;
            access_log     off;
            log_not_found  off;
          }

          
          location / {
            limit_req zone=url_redirect_limit burst=40 nodelay;
            limit_req_status 444;
            proxy_pass http://url_shortener_backend;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-Host \$host;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwared-Proto \$scheme;
          }
        }
        EOF

        sudo ln -sf /etc/nginx/sites-available/{{ DOMAIN }} /etc/nginx/sites-enabled/
        sudo nginx -t
        sudo systemctl reload nginx
    - debug: var=update_nginx_config.stdout_lines
    - debug: var=update_nginx_config.stderr_lines


