- hosts: URL_shortener
  name: Configure file system, set data directory for postgres
  remote_user: "{{ USER }}"
  gather_facts: no
  vars_files:
    - ./vars.yml
  tasks:
    - name: Format file system
      args:
        executable: /bin/bash
      register: format_file_system
      shell: |
        # TODO: xvdf
        file_system=$(lsblk -f | grep xvdf | awk '{print $2}')
        
        # IMPORTANT!!! Format the disk only if it is not already formatted, otherwise existing data will be wiped out
        if [ -z "$file_system" ]
        then
          echo "Formatting disk {{ EBS_DEVICE_PATH }}"
          sudo mkfs -t ext4 {{ EBS_DEVICE_PATH }}
        else
          echo "{{ EBS_DEVICE_PATH }} is already formatted"
        fi
    - debug: var=format_file_system.stdout_lines
    - debug: var=format_file_system.stderr_lines
    - name: Mount file system
      args:
        executable: /bin/bash
      register: configure_file_system
      shell: |
        file_system=$(lsblk -f | grep xvdf | awk '{print $2}')
        sudo mkdir -p {{ FS_MOUNT_PATH }}
        sudo mount {{ EBS_DEVICE_PATH }} {{ FS_MOUNT_PATH }}

        # Automatically mount an attached volume after reboot
        uuid=$(sudo blkid {{ EBS_DEVICE_PATH }} -s UUID -o value)
        num_existing_line=$(sudo cat /etc/fstab | grep $uuid | wc -l)

        if [ "$num_existing_line" -eq 0 ]
        then
          sudo cp /etc/fstab /etc/fstab.orig
          echo "UUID=$uuid  {{ FS_MOUNT_PATH }}  $file_system  defaults,nofail  0  2" | sudo tee -a /etc/fstab > /dev/null

          # Verify
          sudo umount {{ FS_MOUNT_PATH }}
          sudo mount -a
        else
          echo "{{ FS_MOUNT_PATH }} is already added to /etc/fstab"
        fi

        sudo file -s {{ EBS_DEVICE_PATH }}
        sudo lsblk -f
        df -h
    - debug: var=configure_file_system.stdout_lines
    - debug: var=configure_file_system.stderr_lines
    - name: Create postgres data directory on mounted volume and copy files from default directory
      args:
        executable: /bin/bash
      register: create_postgres_data_directory
      shell: |
        postgres_path="{{ FS_MOUNT_PATH }}/postgresql/13/data"

        if [ -d "$postgres_path" ]
        then
          echo "$postgres_path already exist."
        else
          sudo mkdir -p $postgres_path
          sudo chown -R postgres:postgres $postgres_path
          sudo chmod 700 $postgres_path
        fi
        sudo rsync -av --ignore-existing /var/lib/postgresql/13/main/ $postgres_path
    - debug: var=create_postgres_data_directory.stdout_lines
    - debug: var=create_postgres_data_directory.stderr_lines
    - name: Configure postgresql.conf
      args:
        executable: /bin/bash
      register: postgres_conf_data_directory
      shell: |
        postgres_path="{{ FS_MOUNT_PATH }}/postgresql/13/data"

        sudo mkdir -p /etc/postgresql/13/main/conf.d

        cat <<EOF | sudo tee /etc/postgresql/13/main/conf.d/postgresql.conf > /dev/null 
        #------------------------------------------------------------------------------
        # FILE LOCATIONS
        #------------------------------------------------------------------------------
        data_directory = '$postgres_path'

        #------------------------------------------------------------------------------
        # REPORTING AND LOGGING
        #------------------------------------------------------------------------------
        # - Where to Log -
        log_destination = 'stderr'
        logging_collector = on
        log_directory = 'log'
        log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
        log_file_mode = 0600
        log_rotation_age = 1d
        log_rotation_size = 10MB

        # - When to Log -
        log_min_messages = warning
        log_min_error_statement = error
        log_min_duration_sample = 100
        log_statement_sample_rate = 0.5

        # - What to Log -
        log_duration = on
        log_line_prefix = '%m [%p] [%d] %u %a'
        EOF
    - debug: var=postgres_conf_data_directory.stdout_lines
    - debug: var=postgres_conf_data_directory.stderr_lines
    - name: Configure postgres systemd
      args:
        executable: /bin/bash
      register: postgres_systemd
      shell: |
        postgres_path="{{ FS_MOUNT_PATH }}/postgresql/13/data"

        sudo mkdir -p /etc/systemd/system/postgresql.service.d
        sudo touch /etc/systemd/system/postgresql.service.d/override.conf
        num_existing_line=$(sudo cat /etc/systemd/system/postgresql.service.d/override.conf | grep Environment=PGDATA=$postgres_path | wc -l)
        
        if [ "$num_existing_line" -eq 0 ]
        then
          cat <<EOF | sudo tee -a /etc/systemd/system/postgresql.service.d/override.conf > /dev/null
          [Service]
          Environment=PGDATA=$postgres_path
        EOF
        else
          echo "PGDATA is already added to /etc/systemd/system/postgresql.service.d/override.conf"
        fi

        sudo systemctl daemon-reload
        sudo systemctl reenable postgresql.service
        sudo systemctl restart postgresql.service
    - debug: var=postgres_systemd.stdout_lines
    - debug: var=postgres_systemd.stderr_lines
